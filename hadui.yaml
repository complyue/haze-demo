# !CAVEATS!
#
# This is by far a serious SECURITY VULNERABILITY
#
# By serving Hadui ws with no authentication,
# an arbitrary code execution exploit is created
# on the computer. This is less threatening in an
# trusted close (like typical HPC) environment,
# but as it being. When more people start using Hadui,
# this exploit will become more profitable for hostile
# attackers, after some threshold, there should be
# someone to implement some sort of ws authentication
# as a solution. wss client certificate may be a
# reasonable choice.

# this cfg file 'hadui.yaml' is located by Hadui besides
# the nearest 'stack.yaml' up from cwd you run Hadui.
# it uses `stack path --project-root` to locate the dir.

# by default, only the local interface is bound to listen
# for Hadui ws connections, this hardens the arbitrary
# code execution vulnerability a bit. but for you or your
# collegues to access Hadui web front from other machines,
# bind to one of the external interfaces, or simply all
# interfaces by specifying '0.0.0.0'.
bind-interface: 0.0.0.0
http-port: 5050
ws-port: 5051

# backend log level
log-level: DEBUG

# target component(s) to be loaded into GHCi
# * mandatory for Cabal based Hadui projects
#     `cabal v2-repl` expects you to specify the TARGET which
#      resolves to one and only one component explicitly
# * optional for Stack based Hadui projects
#     all components will be loaded by default
# * ignored for barebone Hadui projects
#     you should enjoy crafting a `.ghci` script to control how
#     GHCi shall behave for interactions with web front
ghci-targets: []

# have hadui resources from these packages served by Hadui http
# order matters in this list, former means higher precedence
overlay:
  - haze

# additional options passed to GHCi
ghci-options:
  # max history in trace, GHCi defaults to 50
  - -fghci-hist-size=300

  # run project code compiled, instead of interpreted, for performance
  # but you won't get source locations for uncaught errors at runtime
  #- -fobject-code

# additional options passed to both GHC and GHCi
ghc-options:
  # language extensions to use, recommended by rio
  #     https://github.com/commercialhaskell/rio/#language-extensions
  - -XAutoDeriveTypeable
  - -XBangPatterns
  - -XBinaryLiterals
  - -XConstraintKinds
  - -XDataKinds
  - -XDefaultSignatures
  - -XDeriveDataTypeable
  - -XDeriveFoldable
  - -XDeriveFunctor
  - -XDeriveGeneric
  - -XDeriveTraversable
  - -XDoAndIfThenElse
  - -XEmptyDataDecls
  - -XExistentialQuantification
  - -XFlexibleContexts
  - -XFlexibleInstances
  - -XFunctionalDependencies
  - -XGADTs
  - -XGeneralizedNewtypeDeriving
  - -XInstanceSigs
  - -XKindSignatures
  - -XLambdaCase
  - -XMonadFailDesugaring
  - -XMultiParamTypeClasses
  - -XMultiWayIf
  - -XNamedFieldPuns
  - -XNoImplicitPrelude
  - -XOverloadedStrings
  - -XPartialTypeSignatures
  - -XPatternGuards
  - -XPolyKinds
  - -XRankNTypes
  - -XRecordWildCards
  - -XScopedTypeVariables
  - -XStandaloneDeriving
  - -XTupleSections
  - -XTypeFamilies
  - -XTypeSynonymInstances
  - -XViewPatterns
